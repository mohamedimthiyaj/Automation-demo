
function html_entities(str) {
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

function have_active_scans() {
    var has_scans;
    $.ajax({
        type: 'GET',
        url: "/?p=results_json&s=myscans&r=" + Math.random(),
        dataType: 'json',
        success: function(data) { has_scans = (data['active_scans'] != 0); },
        data: {},
        async: false
    });
    return has_scans;
}

function show_output_frame(target)
{
    // Write the output container
    var pt_modal = document.getElementById("pt_modal");

    if (pt_modal == null) {
        var container_html = '\
            <div class="container">\
                <div class="modal fade" id="pt_modal" role="dialog">\
                    <div class="modal-dialog pt-modal">\
                        <div class="modal-content pt-modal-content">\
                            <div class="modal-body">\
                                <button type="button" class="close" onclick="$(\'#pt_modal\').modal(\'toggle\'); location.reload();"\
                                 ontouchend="$(\'#pt_modal\').modal(\'toggle\'); location.reload();">&times;</button>\
                                <iframe id="pt_scan_output" class="pt-scan-output"></iframe>\
                            </div>\
                        </div>\
                    </div>\
                </div>\
            </div>\
            ';

        // Append the container to body HTML
        document.body.outerHTML = container_html.replace("\n", "") + document.body.outerHTML;

        // Set waiting html to output iframe
        var output_frame = document.getElementById("pt_scan_output");
        var doc = output_frame.contentWindow.document;

        output_frame.src = "about:blank";

        var waiting_html = "\
                <!DOCTYPE html>\
                <html>\
                    <head>\
                        <link rel=\"stylesheet\" href=\"/template/assets/css/bootstrap.css\" />\
                        <link rel=\"stylesheet\" href=\"/template/myassets/css/ace.css\" />\
                        <style>\
                        .page-area {\
                            width: 100% !important;\
                        }\
                        </style>\
                    </head>\
                    <body>\
                        <script>\
                            var dataLayer = parent.dataLayer;\
                        </script>\
                        <div class=\"container\" id=\"loader_container\">\
                            <h2 class=\"text-center\">Scanning " + html_entities(target) + "...</h2><br><br>\
                            <div class=\"loader\"></div>\
                        </div>\
                    </body>\
                </html>\
            ";

        doc.open();
        doc.write(waiting_html.replace("\n", ""));
        doc.close();
    }


    $(document).ready(function(){
        var pt_modal = document.getElementById("pt_modal");
        $(pt_modal).modal({backdrop: 'static', keyboard: false});

        // Prevent body from scrolling when modal is open
        $('body').css('overflow','hidden');
    });
}


function handle_start_scan(xhttp, target, api_url)
{
    if (xhttp.readyState == XMLHttpRequest.DONE) {
        var targetInput = $("#target");
        var helpBlock   = document.querySelector(".help-block");

        if (xhttp.status == 200) {
            try {
                var json_data = JSON.parse(xhttp.responseText);

                if (json_data["scan_status"] == "waiting" || json_data["json_data"] == "running") {
                    if (helpBlock != null) {
                        helpBlock.parentNode.removeChild(helpBlock);
                    }

                    show_output_frame(target);
                    setTimeout(get_output, 2000, json_data["scan_id"], api_url);
                } else {
                    if (helpBlock === null) {
                        var errorMsg = '<span for="target" class="help-block">'+json_data["details"]+'</span>';
                        $(errorMsg).insertAfter(targetInput);
                    } else {
                        helpBlock.innerHTML = json_data["details"];
                        helpBlock.style.display = 'inline';
                    }
                }
            } catch(error) {
                show_output_frame(target);
                var doc = document.getElementById("pt_scan_output").contentWindow.document;
                doc.getElementById("loader_container").style.display = "none";
                doc.write(error.message);
            }

        } else {
            show_output_frame(target);
            var doc = document.getElementById("pt_scan_output").contentWindow.document;
            doc.getElementById("loader_container").style.display = "none";
            doc.write("HTTP response code: " + this.status);
        }
    }
}

function start_scan(tool_id, target, api_url)
{
    var targetInput = $("#target");
    var helpBlock   = document.querySelector(".help-block");

    if (have_active_scans()) {
        if (helpBlock === null) {
            var errorMsg = '<span for="target" class="help-block">Please wait for the previous scan to finish before starting a new scan.</span>';
            $(errorMsg).insertAfter(targetInput);
        } else {
            helpBlock.innerHTML = 'Please wait for the previous scan to finish before starting a new scan.';
            helpBlock.style.display = 'inline';
        }
        return;
    }

    target = target.trim();
    if (window.XMLHttpRequest) {
        xhttp = new XMLHttpRequest();
    } else {
        // code for old IE browsers
        xhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xhttp.onreadystatechange =  function() { handle_start_scan(xhttp, target, api_url) };
    xhttp.open("POST", api_url);
    xhttp.send(JSON.stringify(
            {
                "op":               "start_scan",
                "tool_id":          tool_id,
                "tool_params": {
                    "target":       target
                }
            }
        ));
}

/* Add jquery dataTable to discovery table */
function bindDataTable(context) {
    console.log("bind DataTable");
    var actionsColumnIndex = $('#discovery-table', context).length ? ($("#discovery-table", context).find('tr')[0].cells.length -1) : 0;
    $('#discovery-table', context).dataTable({
            'sDom' : 't',
            'paging': false,
            'searching': false,
            'info': false,
            columnDefs: [
                {
                    orderable: false,
                    targets: [actionsColumnIndex]
                }
            ],
            'order': [[0, "asc"]],
            'initComplete': function() {
                $('#discovery-table', context).css('visibility', 'visible');
            }
        });
}

/**
 * Return TRUE if the user's browser is some type of Safari.
 * Return FALSE for other browsers.
 * Might return false positives (not tested exhaustively).
 */
function isBrowserSafari() {
    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
}

/**
 * Access the PDF file generated by clicking the 'Download Report' button in the report modal.
 * @param  {string} base64_pdf
 * @param  {string} name
 * @return {void}
 */
function downloadPDF(base64_pdf, name) {
    // IE10+ : (has Blob, but not a[download] or URL)
    if (navigator.msSaveBlob) {
        var byteCharacters = atob(base64_pdf);
        var byteNumbers = new Array(byteCharacters.length);
        for (var i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        var byteArray = new Uint8Array(byteNumbers);
        var blob = new Blob([byteArray], { type: 'application/pdf' });
        window.navigator.msSaveOrOpenBlob(blob, name);
    } else {
        const linkSource = "data:application/octet-stream;base64," + base64_pdf;
        const downloadLink = document.createElement("a");

        downloadLink.download = name;
        downloadLink.href = linkSource;
        downloadLink.target = "_blank";

        document.getElementById("pt_modal").appendChild(downloadLink);
        downloadLink.click();
    }
}

function handle_get_output(xhttp, scan_id, api_url, output_format)
{
    // Default parameter, compatible with older browsers
    if (!output_format) {
        output_format = "html";
    }

    if (xhttp.readyState == XMLHttpRequest.DONE) {
        var output_frame = document.getElementById("pt_scan_output");
        var doc = output_frame.contentWindow.document;

        if (xhttp.status == 200) {
            if (output_format === "html") {
                try {
                    var json_data = JSON.parse(xhttp.responseText);
                    var scan_finished = false;
                    if (json_data["scan_status"] == "failed to start") {
                        var loader_container = doc.getElementById("loader_container");
                        if (loader_container !== null) {
                            loader_container.innerHTML = " \
                                <h2 class=\"text-center\">Tool failed to start.</h2><br><br>\
                                <div class=\"loader\"></div>";
                        }
                        return;
                    } else if (json_data["scan_status"] == "waiting") {
                        setTimeout(get_output, 3000, scan_id, api_url);
                        var loader_container = doc.getElementById("loader_container");
                        if (loader_container !== null) {
                            loader_container.innerHTML = " \
                                <h2 class=\"text-center\">Waiting...</h2><br><br>\
                                <div class=\"loader\"></div>";
                        }
                        return;
                    } else if (json_data["scan_status"] == "running") {
                        setTimeout(get_output, 3000, scan_id, api_url);
                    } else {
                        scan_finished = true;
                    }

                    /* Display download button */
                    var btn_download = '\
                        <button id="btn-free-download" type="button" class="btn btn-light-custom text-muted"\
                            onclick="get_output('+scan_id+', \''+api_url+'\', \'pdf\')">\
                                <i class="fa fa-download mr-1"></i>DOWNLOAD REPORT\
                        </button>';

                    /* Only create download button if it doesn't exist */
                    if ($("#btn-free-download").length == 0)
                        $("#pt_modal .modal-body").prepend(btn_download);

                    var loader = doc.getElementById("loader_container");
                    if (loader != null) {
                        loader.style.display = "none";
                    }

                    doc.open();
                    var html = json_data["scan_output"]["output_html"];

                    if (window.isABVariant == true) {
                        html = html.replace('<!--ABTEST', '');
                        html = html.replace('ABTEST-->', '');
                    }

                    /* Add mailchimp form at the end */
                    html += '\
                    <link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css">\
                    <div class="upsale-wrapper email-signup-wrapper">\
                    <div id="mc_embed_signup">\
                    <form action="https://pentest-tools.us16.list-manage.com/subscribe/post?u=e04d195b99ece443048117e10&amp;id=4398a2ded2" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>\
                        <div id="mc_embed_signup_scroll">\
                        <label for="mce-EMAIL" class="free-email-signup-title">Be the first to know when we launch new vulnerability scanners and other pentesting tools!</label>\
                        <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="Your best email address" required>\
                        <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\
                        <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_e04d195b99ece443048117e10_d4dd1c7aed" tabindex="-1" value=""></div>\
                        <div class="clear"><input type="submit" value="Send me updates" name="subscribe" id="mc-embedded-subscribe" class="btn btn-warning btn-warning2"></div>\
                        <p class="free-email-signup-subtitle">* Pentesting tools info only. No fluff. No spam.</p>\
                        </div>\
                    </form>\
                    </div>\
                    </div>';

                    doc.write(html);
                    doc.close();

                    /* Because mobile Safari has problems scrolling the report,
                     * generate only the progress bar and the download button */
                    if (doc.body && isBrowserSafari() && $(window).width() < 992) {
                        var safariElementsToHide = doc.getElementsByClassName("unauth-iphone-hide");
                        for (var i = 0; i < safariElementsToHide.length; i++) {
                            safariElementsToHide[i].style.display = "none";
                        }

                        /* If the progress bar exists and progress is 100%,
                         * display some text to let user know they can download the report */
                        var progressBar = $(".progress-bar", $("#pt_scan_output").contents());
                        if (progressBar.text() === "100%") {
                            var doneNotice = "<p class='text-center'>Scan completed! Use the <b>Download</b> button above to download your report.</p>";
                            var scanProgressContainer = $("#scan-progress", $("#pt_scan_output").contents());
                            $(doneNotice).insertAfter(scanProgressContainer);
                        }
                    }

                    /* Allow iframe body to scroll horizontally. */
                    if (doc.body) {
                        doc.body.style.overflowX = "scroll";
                        doc.body.style.backgroundColor = "white";
                    }

                    /* When scan is finished, add dataTables to result */
                    if(scan_finished) {
                        output_frame.onload = function() {
                            bindDataTable(doc);
                        }
                    }
                } catch(error) {
                    doc.write("Html: " + error.message);
                }
            } else if (output_format === "pdf") {
                try {
                    var json_data = JSON.parse(xhttp.responseText);
                    if (json_data["op_status"] == "fail") {
                        var err_details = json_data["details"];
                        var capitalized_error_details = err_details.charAt(0).toUpperCase() + err_details.slice(1);
                        alert(err_details);
                        return;
                    }

                    var base64_file = json_data["scan_output"]["output_pdf"];

                    /* Serve the base64 pdf file for download. */
                    downloadPDF(base64_file, "scan_report.pdf");
                } catch(error) {
                    doc.write("PDF: " + error.message);
                }
            }

        } else {
            doc.write("HTTP response code: " + xhttp.status);
        }
    }
}


function get_output(scan_id, api_url, output_format)
{
    // Default parameter, compatible with older browsers
    if (!output_format) {
        output_format = "html";
    }

    if (window.XMLHttpRequest) {
        xhttp = new XMLHttpRequest();
    } else {
        // code for old IE browsers
        xhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xhttp.onreadystatechange = function() { handle_get_output(xhttp, scan_id, api_url, output_format) };
    xhttp.open("POST", api_url);
    xhttp.send(JSON.stringify(
                {
                    "op":            "get_output",
                    "scan_id":       scan_id,
                    "output_format": output_format,
                }
            ));
}

function activate_tool_dropdowns()
{
    var tools_button = $("ul#menu-tools-mobile > li > a");
    var main_dropdown = $("ul#menu-tools-mobile > li").first();
    var level2_dropdowns = $(".level2-dropdown");
    var level3_dropdowns = $(".level3-dropdown");

    /* Only one element. Can get it with "first()" */
    main_dropdown.on('click', '#nav-tools-mobile', function() {
        main_dropdown.toggleClass("dropped");

        /* If we are closing the current element, close all of its open children, too */
        var dropdown_children = main_dropdown.find("li.dropped");
        dropdown_children.each(function() {
            $(this).removeClass("dropped");
        });
    });

    level2_dropdowns.each(function() {
        var dropdown = $(this);
        var dropdown_link = dropdown.children("a").first();
        $(this).on('click', '.level2-dropdown-link', function() {
            /* If there is another sibling (same level) of dropdown with class "dropped",
             * disable its "dropped" class
             */

            var dropdown_siblings = dropdown.siblings(".dropped");
            dropdown_siblings.each(function() {
                $(this).removeClass("dropped");
            });

            /* If we are closing the current element, close all of its open children, too */
            var dropdown_children = dropdown.find("li.dropped");
            dropdown_children.each(function() {
                $(this).removeClass("dropped");
            });

            /* Toggle dropdown for clicked element */
            dropdown.toggleClass("dropped");
        });
    });

    level3_dropdowns.each(function() {
        var dropdown = $(this);
        var dropdown_link = dropdown.children("a").first();
        $(this).on('click', '.level3-dropdown-link', function() {
            /* If there is another sibling (same level) of dropdown with class "dropped",
             * disable its "dropped" class
             */
            var dropdown_siblings = dropdown.siblings(".dropped");
            dropdown_siblings.each(function() {
                $(this).removeClass("dropped");
            });

            /* If we are closing the current element, close all of its open children, too */
            var dropdown_children = dropdown.find("li.dropped");
            dropdown_children.each(function() {
                $(this).removeClass("dropped");
            });

            /* Toggle dropdown for clicked element */
            dropdown.toggleClass("dropped");
        });
    });

    /* Activate closing of the menu on click outside */
    $(window).on("click", function(event) {
        if(!$(event.target).closest('ul#menu-tools-mobile > li').length) {
            if(main_dropdown.hasClass("dropped")) {
                main_dropdown.removeClass("dropped");
            }
        }
    });
}

// i commented this lines to stop popup

// /* Replaces target's innerHTML with a spinner. Returns the innerHTML.
//    Spinner taken from: http://tobiasahlin.com/spinkit/ */
// function activate_spinner(target, height, width, barWidth) {
//     var spinner_html = '<div class="lds" style="height: '+height+'px; width: '+width+'px;">\
//                         <div class="rect1" style="width: '+barWidth+'px;"></div>\
//                         <div class="rect2" style="width: '+barWidth+'px;"></div>\
//                         <div class="rect3" style="width: '+barWidth+'px;"></div>\
//                         <div class="rect4" style="width: '+barWidth+'px;"></div>\
//                         <div class="rect5" style="width: '+barWidth+'px;"></div>\
//                         </div>';
//     var bkup_html = target.innerHTML;
//     target.innerHTML = spinner_html;
//     return bkup_html;
// }

// /* Places the target's original html back into it.
//    Must pass the original html as argument (the one that has been returned by activate_spinner) */
function deactivate_spinner(target, html) {
    target.innerHTML = html;
}

function spawn_image_popup(img_elem) {
    var src = img_elem.src;
    var caption = img_elem.alt;
    var modal_html = "<div id='magnific-image-modal' class='magnific-image-modal'>\
            <span class='magnific-close' onclick='remove_html_element_by_id(\"magnific-image-modal\")'>&times;</span>\
            <img class='magnific-image-content' src='" + src + "' />\
            <div class='magnific-image-caption'>" + caption + "</div>\
        </div>\
    ";
    /* Actually create the element */
    var aux = document.createElement('div');
    aux.innerHTML = modal_html;
    /* Append it to the DOM */
    document.body.appendChild(aux.firstChild);
}

function remove_html_element_by_id(id) {
    var elem = document.getElementById(id);
    elem.parentNode.removeChild(elem);
}

/* Closes the associated homepage banner or announcement */
function close_announcement(element) {
    element.parentNode.parentNode.removeChild(element.parentNode);
}

/* Loads a script inside the page dynamically.
 *
 * Optionally, you can specify a callback function to be performed
 * after the script has loaded (something that depends on the script being loaded) */
var onDemandScripts = [];
function load_script(scriptSrc, callback) {
    /* Don't load the script a second time */
    if (scriptSrc in onDemandScripts)
        return;

    var script = document.createElement("script");
    if (callback) {
        script.onload = callback;
    }
    script.src = scriptSrc;

    /* Mark the script as loaded */
    onDemandScripts.push(scriptSrc);

    document.head.appendChild(script);
}

/* Toggle the "You should also try" menu in and out of visibility on button click */
if ($('#try-more-tools-toggle').length != 0) {
    $('#try-more-tools-toggle').on('click', function() {
        $(".try-more-tools").toggleClass("toggled");
    })
}

activate_tool_dropdowns();

/*
 * Smooth scrolling
 */

$('a[href*="#"]') // Select all links with hashes
    .not('[href="#"]') // Remove links that don't actually link to anything
    .not('[href="#0"]')
    .click(function(event) {
        // On-page links
        if (location.pathname.replace(/^\//, '') === this.pathname.replace(/^\//, '') && location.hostname === this.hostname) {
            // Figure out element to scroll to
            var link = this;
            var target = $(this.hash);
            target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
            // Does a scroll target exist?
            if (target.length) {
                // Don't affect tabs (for example in pages/unauthenticated/customers.php)
                if (this.getAttribute("role") === "tab") {
                    return
                }
                // Only prevent default if animation is actually gonna happen
                event.preventDefault();
                $('html, body').animate({
                    scrollTop: target.offset().top
                }, 1000, function() {
                    // Callback after animation

                    // Check if target focus is handled separately
                    prefersCustomFocus = link.dataset.hasOwnProperty('smoothScrollFocus') && link.dataset.smoothScrollFocus === 'false';
                    if (prefersCustomFocus) {
                        return;
                    }

                    // Must change focus!
                    var $target = $(target);
                    $target.focus();

                    // Checking if the target was focused
                    if ($target.is(":focus")) {
                        return false;
                    } else {
                        $target.attr('tabindex','-1'); // Adding tabindex for elements not focusable
                        $target.focus(); // Set focus again
                    };
                });
            }
        }
    });
